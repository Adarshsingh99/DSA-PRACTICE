/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
        {
            return null;
        }
        // when root value is equal to key 
        if(root.val == key)
        {
            return helper(root);
        }
        // store the root so that tree doesn,t destroy
        TreeNode curr = root;

        while(root!=null)
        {
            if(root.val < key)
            {
                if(root.right!=null && root.right.val == key)
                {
                    root.right = helper(root.right);
                    break;
                }
                else 
                root = root.right;
            }
            else{
                if(root.left!=null && root.left.val == key)
                {
                    root.left = helper(root.left);
                    break;
                }
                root = root.left;
            }
        }
        return curr;

    }
    /// helper function to perform delete operation
    public TreeNode helper(TreeNode root)
    {
        // if root-left doest not exist return right child
        if(root.left== null) return root.right;
        // right-child does not exist retun left child
        else if(root.right==null) return root.left;
        else
        {
             TreeNode rightChild = root.right;
             TreeNode rightMost = findRightMost(root.left);
             rightMost.right = rightChild;
             return root.left; 
        }

    }
    // this function is use for find rightMost element
    public TreeNode findRightMost(TreeNode root)
    {
        if(root.right==null) return root;

        return findRightMost(root.right);
    }
}
